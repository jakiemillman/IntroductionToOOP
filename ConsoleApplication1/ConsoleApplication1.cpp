//IntroductionToOOP
#include <iostream>
using namespace std;
//Создавая структуру или класс, мы создаем новый типа данных, который является сложным в отличае от приметивных, таких как int, double, char;
//Классы и структуры называют пользовательскими типами данных;
//Объекты называют экземплярами (instance);
class Point
{
    double x;
    double y;
public:
    double get_x()const
    {
        return x;
    }
    double get_y()const
    {
        return y;
    }
    void set_x(double x)
    {
        this->x = x;
    }
    void set_y(double y)
    {
        this->y = y;
    }
    double distace()
    {
        return sqrt(pow(x, 2) + pow(y, 2));
    }
};
double Distance(Point A, Point B)
{
    return sqrt((A.get_x()-B.get_x())* (A.get_x() - B.get_x()) + (A.get_y() - B.get_y()) * (A.get_y() - B.get_y()));
}

//#define STRUCT_POINT

int main()
{
    setlocale(LC_ALL, "rus");
#ifdef STRUCT_POINT



    //members
    int a;//объявление переменной 'a' типа 'int'
    Point A;//объявление переменной 'A' типа 'Point'
            //объявление объекта 'A' типа 'Point'
            //объявление объекта 'A' типа 'Point'
    A.x = 2;
    A.y = 3;
    cout << A.x << " " << A.y << endl;
    Point* pA = &A;
    cout << pA->x << " " << pA->y << endl;
#endif // STRUCT_POINT
    Point A;
    Point B;
    A.set_x(10);
    A.set_y(10);
    B.set_x(21);
    B.set_y(21);
    cout << A.get_x() << "\t" << A.get_y() << endl;
    cout << A.distace()<<endl;
    cout << Distance(A, B)<<endl;
    

    /*1. Инкапсуляция - это сокрытие определенной части класса от внешнего мира.
            модификаторы доступа: 
      2. Prtivate - закрытые поля, доступные только внутри класса и не доступны за его пределами.
            В этой секции обычно размещаются переменные класса, это защищает их от случайной перезаписи.
            Public - это открытые поля, доступные из любого места программы. Здесь обычно размещают методы, и здесь ни в коем случае нельзя размещать переменные члены класса. 
            Protected - доступны только внутри класса и его дочерних классов. Этот модификатор доступа используется только при наследовании.
            Отличие класса от структуры в том, что в структуре все поля по умолчанию открыты, а в классе закрыты.
      Get-Set методы нужны для получения доступа к закрытым переменным в классе.
            get (взять) - открывает достуб к закрытым полям на чтение, т. е. позволяет взять или получить значение к закрытой переменной.
            set (задать, установить) - открывает доступ к закрытым переменным на запись, т. е., позваляет задавать значение закрытых переменных.
            кроме того srt-методы обеспечивают фильтрацию данных, т.е. предотвращают попадание некорректных значаний в переменные значения класса.
            get и set метод должен быть у каждой переменной в классе, т.е get и set методов в классе будет ровно столько, сколько и переменных в классе
            
            get методы обязательно должны быть константными. Константным назывется метод, который не изменяет объект для которого вызывается.
            
            This - это указатель на объект, для которого вызывается метод.

    1. Constructor - метод, который создает объект. Он выделяет память под объект, и инициализирует его поля при создании. Как и любую другую функцию можно перегрузить, потому что его можно перегрузить.В классе может быть сколько угодно конструкторов.
    2. ~Distructor - это метод, который уничтожает объект по завершении его времени жизни. Время жизни объекта завершается при выходе за пределы области видимости, к которой он объявлен. Конструктор и деструктор никогда не возвращают никаких значений, при это перед ними даже не пишется ключевое слово void.
    Никогда не принимает никаких параментров, поэтому и перегрузить его нелья. Может быть только 1 деструктор. Не важно каким образом создавались объекты, все объекты удаляются одинаково.
    3. Assingment operator

    Кострукторы бывают с параметрами, без параметров, по умолчанию, конструктор копирования, коструктор переноса.
            */
}